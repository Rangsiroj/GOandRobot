from gnu_interface import GNUGo
from vision import VisionSystem
from middleware import generate_mapping, board_to_robot_coords, mapping
# from robot_controller import move_robot
import time

# ‡πÉ‡∏ä‡πâ mapping ‡πÅ‡∏ö‡∏ö dynamic (‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ)
mapping = generate_mapping(start_x=90, start_y=85, step=24)

gnugo = GNUGo()
vision = VisionSystem()
vision.run()

try:
    while True:
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô...")
        new_move = vision.detect_new_stone()
        if new_move:
            print(f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {new_move}")
            gnugo.play_move("black", new_move)
            ai_move = gnugo.genmove("white")
            print(f"AI ‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà: {ai_move}")
            # x, y = board_to_robot_coords(ai_move)
            # move_robot(x, y)
            print(f"üì¢ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏Å‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: {ai_move}")
        time.sleep(1)

except KeyboardInterrupt:
    gnugo.close()
    vision.release()
    print("‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß")